
openapi: 3.1.0
info:
  title: Logstash APIs
  description: |
    When you run Logstash, it automatically captures runtime metrics that you can use to monitor the health and performance of your Logstash deployment.
    The metrics collected by Logstash include:
    
    - Logstash node info, like pipeline settings, OS info, and JVM info.
    - Plugin info, including a list of installed plugins.
    - Node stats, like JVM stats, process stats, event-related stats, and pipeline runtime stats.
    - Hot threads.
    - Health report. 

    The APIs that retrieve these metrics are available by default without requiring any extra configuration.

    ## Documentation source and versions

    This documentation is derived from the `9.0` branch of the [logstash](https://github.com/elastic/logstash) repository.
    It is provided under license [Attribution-NonCommercial-NoDerivatives 4.0 International](https://creativecommons.org/licenses/by-nc-nd/4.0/).
  version: '1.0'
  x-doc-license:
    name: Attribution-NonCommercial-NoDerivatives 4.0 International
    url: https://creativecommons.org/licenses/by-nc-nd/4.0/
  x-feedbackLink:
    label: Feedback
    url: https://github.com/elastic/docs-content/issues/new?assignees=&labels=feedback%2Ccommunity&projects=&template=api-feedback.yaml&title=%5BFeedback%5D%3A+
servers:
  - url: /
security:
  - apiKeyAuth: []
tags:
  - name: health
    x-displayName: Health report
    # description: 
    # externalDocs:
    #   description: 
    #   url: 
  - name: hot threads
    x-displayName: Hot threads
    # description: 
    # externalDocs:
    #   description: 
    #   url: 
  - name: node info
    x-displayName: Node info
    description: |
      Logstash node info, like pipeline settings, OS info, and JVM info.
    # externalDocs:
    #   description: 
    #   url: 
  - name: node stats
    x-displayName: Node stats
    description: |
      Node stats, like JVM stats, process stats, event-related stats, and pipeline runtime stats.
    # externalDocs:
    #   description: 
    #   url: 
  - name: plugin info
    x-displayName: Plugins info
    description: |
      Plugin info, including a list of installed plugins.
    # externalDocs:
    #   description: 
    #   url: 
paths: 
  /_node/<types>:
    get:
      summary: Get node info
      description: |
        Get information about Logstash nodes, where `<types>` (optional) specifies the types of node info you want returned.
        You can limit the info that is returned by combining any of these types in a comma-separated list:

        - `pipelines`
        - `os`
        - `jvm`
      operationId: nodeInfo
      tags:
        - node info
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
          description: >
            If you append `?pretty=true` to the request, the JSON returned will be pretty formatted. Use it for debugging only!
      responses:
        '200':
          description: Indicates a successful call
          content:
            application/json:
              examples:
                nodeInfoExample1:
                  # summary:
                  value:
                    pipelines:
                      - test: 
                          workers: 1
                          batch_size: 1
                          batch_delay: 5
                          config_reload_automatic: false
                          config_reload_interval: 3
                      - test2: 
                          workers: 8
                          batch_size: 125
                          batch_delay: 5
                          config_reload_automatic: false
                          config_reload_interval: 3                      

  /_node/plugins:
    get:
      summary: Get plugin info
      description: >
        Get information about all Logstash plugins that are currently installed.
        This API returns the same output you get by running the `bin/logstash-plugin list --verbose` command.
      operationId: nodePlugins
      tags:
        - plugin info
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
          description: >
            If you append `?pretty=true` to the request, the JSON returned will be pretty formatted. Use it for debugging only!
      responses:
        '200':
          description: Indicates a successful call
          content:
            application/json:
              examples:
                nodePluginsExample1:
                  # summary:
                  value:
                    total: 1
                    plugins:
                      - name: logstash-codec-cef
                        version: 6.2.8
                      - name: logstash-codec-collectd
                        version: 3.0.3
                      - name: logstash-codec-dots
                        version: 3.0.2
                      - name: logstash-coded-edn
                        version: 3.0.2 

  /_node/stats:
    get:
      summary: Get node stats
      description: |
        Get runtime stats for Logstash, where `<types>` (optional) specifies the types of stats you want to return.
        You can limit the info that is returned by combining any of these types in a comma-separated list:

        - `jvm` gets JVM stats, including stats about threads, memory usage, garbage collectors, and uptime.
        - `process` gets process stats, including stats about file descriptors, memory consumption, and CPU usage.
        - `events` gets event-related statistics for the Logstash instance (regardless of how many pipelines were created and destroyed).
        - `flow` gets flow-related statistics for the Logstash instance (regardless of how many pipelines were created and destroyed).
        - `pipelines` gets runtime stats about each Logstash pipeline.
        - `reloads` gets runtime stats about config reload successes and failures.
        - `os` gets runtime stats about cgroups when Logstash is running in a container.
        - `geoip_download_manager` gets stats for databases used with the Geoip filter plugin.
        
      operationId: nodeStats
      tags:
        - node stats
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
          description: >
            If you append `?pretty=true` to the request, the JSON returned will be pretty formatted (use it for debugging only!).
      responses:
        '200':
          description: Indicates a successful call
          content:
            application/json:
              examples:
                nodeStatsExample1:
                  # summary:
                  value:
                    jvm:
                      threads:
                        count: 49
                        peak_count: 50
                      mem:
                        heap_used_percent: 14
                        heap_committed_in_bytes: 309866496
                        heap_max_in_bytes: 1037959168
                        heap_used_in_bytes: 151686096
                        non_heap_used_in_bytes: 122486176
                        non_heap_committed_in_bytes: 133222400
                        pools:
                          survivor:
                            peak_used_in_bytes: 8912896
                            used_in_bytes: 288776
                            peak_max_in_bytes: 35782656
                            max_in_bytes: 35782656
                            committed_in_bytes: 8912896
                          old:
                            peak_used_in_bytes: 148656848
                            used_in_bytes: 148656848
                            peak_max_in_bytes: 715849728
                            max_in_bytes: 715849728
                            committed_in_bytes: 229322752
                          young:
                            peak_used_in_bytes: 71630848
                            used_in_bytes: 2740472
                            peak_max_in_bytes: 286326784
                            max_in_bytes: 286326784
                            committed_in_bytes: 71630848
                      gc:
                        collectors:
                          old:
                            collection_time_in_millis: 607
                            collection_count: 12
                          young:
                            collection_time_in_millis: 4904
                            collection_count: 1033
                      uptime_in_millis: 1809643

  /_node/hot_threads:
    get:
      summary: Get hot threads
      description: >
        Get information about current hot threads for Logstash.
        A hot thread is a Java thread that has high CPU usage and takes longer than normal to execute. 
      operationId: nodeHot_threads
      tags:
        - hot threads
      parameters:
        - name: threads
          in: query
          schema:
            type: integer
          description: >
            The number of hot threads to return. The default is 10. 
        - name: stacktrace_size
          in: query
          schema:
            type: integer
          description: >
            The depth of the stack trace to report for each thread. The default is 50. 
        - name: ignore_idle_threads
          in: query
          schema:
            type: boolean
          description: >
            If true, does not return idle threads. The default is `true`. 
        - name: pretty
          in: query
          schema:
            type: boolean
          description: >
            If you append `?pretty=true` to the request, the JSON returned will be pretty formatted. Use it for debugging only!
        - name: human
          in: query
          schema:
            type: boolean
          description: >
            If you append `?human=true` to the request, the JSON returned will be in a human-readable format.
      responses:
        '200':
          description: Indicates a successful call
          content:
            application/json:
              schema:
                type: object
                properties:
                  hot_threads:
                    type: object
                    properties:
                      busiest_threads:
                        type: integer
                      threads:
                        type: array
                        items:
                          $ref: '#/components/schemas/Thread'
                      time:
                        type: string
              examples:
                nodeHotThreadsExample1:
                  # summary:
                  value:
                    hot_threads:
                      time: 2025-01-06T18:25:28-07:00
                      busiest_threads: 3
                      threads: 
                        - name: Ruby-0-Thread-7
                          percent_of_cpu_time: 0.0
                          state: timed_waiting
                          path: /path/to/logstash-8.17.0/vendor/bundle/jruby/1.9/gems/puma-2.16.0-java/lib/puma/thread_pool.rb:187
                          traces:
                            - "java.lang.Object.wait(Native Method)"
                            - "org.jruby.RubyThread.sleep(RubyThread.java:1002)"
                            - "org.jruby.RubyKernel.sleep(RubyKernel.java:803)"
                        - name: "[test2]>worker3"
                          percent_of_cpu_time: 0.85
                          state: waiting
                          traces:
                            - "sun.misc.Unsafe.park(Native Method)"
                            - "java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)"
                            - "java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)"
                        - name: "[test2]>worker2"
                          percent_of_cpu_time: 0.85
                          state: runnable
                          traces:
                            - "org.jruby.RubyClass.allocate(RubyClass.java:225)"
                            - "org.jruby.RubyClass.newInstance(RubyClass.java:856)"
                            - "org.jruby.RubyClass$INVOKER$i$newInstance.call(RubyClass$INVOKER$i$newInstance.gen)"

  /_health_report:
    get:
      summary: Get health status
      description: |
        The health API returns a report with the health status of Logstash and the pipelines that are running inside of it. 
        The report contains a list of indicators that compose Logstash functionality.

        Each indicator has a health status of: green, unknown, yellow, or red. 
        The indicator provides an explanation and metadata describing the reason for its current health status.

        The top-level status is controlled by the worst indicator status.

        In the event that an indicator status is non-green, a list of impacts may be present in the indicator result which detail the functionalities that are negatively affected by the health issue. 
        Each impact carries with it a severity level, an area of the system that is affected, and a simple description of the impact on the system.

        Some health indicators can determine the root cause of a health problem and prescribe a set of steps that can be performed in order to improve the health of the system. 
        The root cause and remediation steps are encapsulated in a diagnosis. 
        A diagnosis contains a cause detailing a root cause analysis, an action containing a brief description of the steps to take to fix the problem, and the URL for detailed troubleshooting help.
        
        NOTE: The health indicators perform root cause analysis of non-green health statuses. 
        This can be computationally expensive when called frequently.
        
      operationId: healthStatus
      tags:
        - health
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
          description: >
            If you append `?pretty=true` to the request, the JSON returned will be pretty formatted. Use it for debugging only!
      responses:
        '200':
          description: Indicates a successful call
          content:
            application/json:
              schema:
                type: object
                properties:
                  indicators:
                    description: Information about the health of Logstash indicators.
                    type: object
                  status:
                    $ref: '#/components/schemas/Statuses'
components:
  securitySchemes:
    apiKeyAuth:
      # description:
      in: header
      name: Authorization
      type: apiKey
  schemas:
<<<<<<< HEAD
    Statuses:
=======
    Common:
      type: object
      properties:
        host:
          type: string
          description: The name of the host machine.
        version:
          type: string
          description: The version of the Logstash instance.
        http_address:
          type: string
          description: The HTTP address where the Logstash instance is accessible, including the port number.
        id:
          type: string
          description: A unique identifier (uuid) for the Logstash instance.
        name:
          type: string
          description: The name of the Logstash instance.
        ephemeral_id:
          type: string
          description: A unique identifier for the ephemeral session of the Logstash instance.
        snapshot:
          type: [boolean, 'null']
        status:
          $ref: '#/components/schemas/Status'
    PipelineSettings:
      type: object
      properties:
        pipeline:
          type: object
          properties:
            workers:
              type: integer
            batch_size:
              type: integer
            batch_delay:
              type: integer

    NodeInfoPipeline:
      type: object
      properties:
        workers:
          type: integer
        batch_size:
          type: integer
        batch_delay:
          type: integer
        config_reload_automatic:
          type: boolean
        config_reload_interval:
          type: integer
        dead_letter_queue_enabled:
          type: boolean

    Status:
>>>>>>> 34a7c676 ([DOCS] Fix nullable type linting error in OpenAPI document (#18018))
      type: string
      description: |
        Health status of Logstash, based on the aggregated status of all indicators.
        Statuses are:
        
        - `green`: Logstash is healthy.
        - `unknown`: Logstash health could not be determined.
        - `yellow`: The functionality of Logstash is in a degraded state and may need remediation to avoid the health becoming red.
        - `red`: Logstash is experiencing an outage or certain features are unavailable for use.  
      enum:
        - green
        - red
        - unknown
        - yellow
    Thread:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        percent_of_cpu_time:
          type: number
          format: double
        state:
          type: string
        traces:
          type: array
          items:
            type: string
<<<<<<< HEAD
=======

    EventsStats:
      type: object
      properties:
        events:
          type: object
          properties:
            in:
              type: integer
              format: int64
            filtered:
              type: integer
              format: int64
            out:
              type: integer
              format: int64
            duration_in_millis:
              type: integer
              format: int64
            queue_push_duration_in_millis:
              type: integer
              format: int64

    JVMStats:
      type: object
      properties:
        jvm:
          type: object
          properties:
            threads:
              type: object
              properties:
                count:
                  type: integer
                  description: The number of active JVM threads.
                peak_count:
                  type: integer
                  description: The peak number of active JVM threads.
            mem:
              type: object
              properties:
                heap_used_percent:
                  type: integer
                  description: The percentage of heap memory used.
                heap_committed_in_bytes:
                  type: integer
                  format: int64
                  description: The committed heap memory in bytes.
                heap_max_in_bytes:
                  type: integer
                  format: int64
                  description: The maximum heap memory in bytes.
                heap_used_in_bytes:
                  type: integer
                  format: int64
                  description: The used heap memory in bytes.
                non_heap_used_in_bytes:
                  type: integer
                  format: int64
                  description: The used non-heap memory in bytes.
                non_heap_committed_in_bytes:
                  type: integer
                  format: int64
                  description: The committed non-heap memory in bytes.
                pools:
                  $ref: "#/components/schemas/JVMMemoryPools"
            gc:
              type: object
              properties:
                collectors:
                  $ref: "#/components/schemas/JVMGCCollectors"
            uptime_in_millis:
              type: integer
              format: int64
              description: The JVM uptime in milliseconds.
    JVMMemoryPool:
      type: object
      properties:
        peak_used_in_bytes:
          type: integer
          format: int64
        used_in_bytes:
          type: integer
          format: int64
        peak_max_in_bytes:
          type: integer
          format: int64
        max_in_bytes:
          type: integer
          format: int64
        committed_in_bytes:
          type: integer
          format: int64
    JVMMemoryPools:
      type: object
      properties:
        survivor:
          $ref: "#/components/schemas/JVMMemoryPool"
        old:
          $ref: "#/components/schemas/JVMMemoryPool"
        young:
          $ref: "#/components/schemas/JVMMemoryPool"
    JVMGCCollector:
      type: object
      properties:
        collection_time_in_millis:
          type: integer
          format: int64
        collection_count:
          type: integer
    JVMGCCollectors:
      type: object
      properties:
        old:
          $ref: "#/components/schemas/JVMGCCollector"
        young:
          $ref: "#/components/schemas/JVMGCCollector"

    OSStats:
      type: object
      properties:
        os:
          type: object
          properties:
            name:
              type: string
            arch:
              type: string
            version:
              type: string
            available_processors:
              type: integer

    ProcessStats:
      type: object
      properties:
        process:
          type: object
          properties:
            open_file_descriptors:
              type: integer
            peak_open_file_descriptors:
              type: integer
            max_file_descriptors:
              type: integer
            mem:
              type: object
              properties:
                total_virtual_in_bytes:
                  type: integer
            cpu:
              type: object
              properties:
                total_in_millis:
                  type: integer
                percent:
                  type: integer
                load_average:
                  type: object
                  properties:
                    "1m":
                      type: number

    ThroughputStats:
      type: object
      properties:
        throughput:
          description: |
            This metric is expressed in events-per-second, and is the rate of events this input plugin is pushing into the pipeline’s queue relative to wall-clock time (`events.in` / second). It includes events that are blocked by the queue and have not yet been accepted.
          allOf: # need to use allOf to keep the description
            - $ref: "#/components/schemas/FlowWindows"
    WorkerStats:
      type: object
      properties:
        worker_utilization:
          description: |
            This is a unitless metric that indicates the percentage of available worker time being used by this individual plugin (`duration` / (`uptime` * `pipeline.workers`). It is useful for identifying which plugins in a pipeline are using the available worker resources.
          allOf: # need to use allOf to keep the description
            - $ref: "#/components/schemas/FlowWindows"
        worker_millis_per_event:
          description: |
            This metric is expressed in worker-millis-spent-per-event (`duration_in_millis` / `events.in`) with higher scores indicating more resources spent per event. It is especially useful for identifying issues with plugins that operate on a small subset of events. An "Infinity" value for a given flow window indicates that worker millis have been spent without any events completing processing; this can indicate a plugin that is either stuck or handling only empty batches.
          allOf: # need to use allOf to keep the description
            - $ref: "#/components/schemas/FlowWindows"

    InputPluginEventsStats:
      type: object
      properties:
        out:
          type: integer
          format: int64
        queue_push_duration_in_millis:
          type: integer
          format: int64
    InputPluginStats:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        flow:
          $ref: "#/components/schemas/ThroughputStats"
        events:
          $ref: "#/components/schemas/InputPluginEventsStats"
    FilterOutputPluginEventsStats:
      type: object
      properties:
        in:
          type: integer
          format: int64
        out:
          type: integer
          format: int64
        duration_in_millis:
          type: integer
          format: int64
    FilterOutputPluginStats:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        flow:
          $ref: "#/components/schemas/WorkerStats"
        events:
          $ref: "#/components/schemas/FilterOutputPluginEventsStats"
    CodecPluginStats:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        decode:
          type: object
          properties:
            duration_in_millis:
              type: integer
            writes_in:
              type: integer
            out:
              type: integer
        encode:
          type: object
          properties:
            duration_in_millis:
              type: integer
            writes_in:
              type: integer

    PipelinesStats:
      type: object
      properties:
        pipelines:
          type: object
          description: |
            A map where each key is a user-defined pipeline name, and the value contains the metrics for that pipeline.
          additionalProperties:
            description: "Metrics of each plugin in the pipeline, flow statistics, event statistics and queue statistics."
            type: object
            allOf:
              - $ref: "#/components/schemas/EventsStats"
              - $ref: "#/components/schemas/PipelineFlowStats"
              - type: object
                properties:
                  plugins:
                    type: object
                    properties:
                      inputs:
                        type: array
                        items:
                          $ref: "#/components/schemas/InputPluginStats"
                      codecs:
                        type: array
                        items:
                          $ref: "#/components/schemas/CodecPluginStats"
                      filters:
                        type: array
                        items:
                          $ref: "#/components/schemas/FilterOutputPluginStats"
                      outputs:
                        type: array
                        items:
                          $ref: "#/components/schemas/FilterOutputPluginStats"
              - $ref: "#/components/schemas/PipelineReloadStats"
              - $ref: "#/components/schemas/PipelineQueueStats"
              - $ref: "#/components/schemas/PipelineSettings"
              - type: object
                properties:
                  hash:
                    type: string
                    description: "A unique hash identifier."
                  ephemeral_id:
                    type: string
                    format: uuid
                    description: "A temporary unique identifier for the instance."

    PipelineReloadStats:
      type: object
      properties:
        reloads:
          type: object
          properties:
            last_error:
              type: [ string, 'null']
            successes:
              type: integer
              format: int64
            last_success_timestamp:
              type: [ string, 'null']
              format: date-time
            last_failure_timestamp:
              type: [ string, 'null']
              format: date-time
            failures:
              type: integer
              format: int64

    ReloadStats:
      type: object
      properties:
        reloads:
          type: object
          properties:
            successes:
              type: integer
              format: int64
            failures:
              type: integer
              format: int64

    PipelineQueueStats:
      type: object
      properties:
        queue:
          type: object
          oneOf:
            - type: object
              description: "The metrics of persisted queue."
              properties:
                type:
                  type: string
                  enum:
                    - persisted
                capacity:
                  type: object
                  properties:
                    max_unread_events:
                      type: integer
                      format: int64
                    page_capacity_in_bytes:
                      type: integer
                      format: int64
                    max_queue_size_in_bytes:
                      type: integer
                      format: int64
                    queue_size_in_bytes:
                      type: integer
                      format: int64
                data:
                  type: object
                  properties:
                    path:
                      type: string
                    free_space_in_bytes:
                      type: integer
                      format: int64
                    storage_type:
                      type: string
                events:
                  type: integer
                  format: int64
                events_count:
                  type: integer
                  format: int64
                queue_size_in_bytes:
                  type: integer
                  format: int64
                max_queue_size_in_bytes:
                  type: integer
                  format: int64
            - type: object
              description: "The metrics of memory queue."
              properties:
                type:
                  type: string
                  enum:
                    - memory
                events_count:
                  type: integer
                  format: int64
                queue_size_in_bytes:
                  type: integer
                  format: int64
                max_queue_size_in_bytes:
                  type: integer
                  format: int64
          discriminator:
            propertyName: type
    QueueStats:
      type: object
      properties:
        queue:
          type: object
          properties:
            events_count:
              type: integer
              format: int64

    GeoIPDBLicenseStats:
      type: object
      properties:
        status:
          type: string
          enum: [ "init", "up_to_date", "to_be_expired", "expired" ]
          description: The status of the database license.
        fail_check_in_days:
          type: integer
          description: The number of days since the last successful check.
        last_updated_at:
          type: string
          format: date-time
          description: The last update timestamp.
>>>>>>> 34a7c676 ([DOCS] Fix nullable type linting error in OpenAPI document (#18018))
