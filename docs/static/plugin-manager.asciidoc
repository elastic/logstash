[[working-with-plugins]]
== Working with plugins

Logstash has a rich collection of input, filter, codec and output plugins. Plugins are available as self-contained
packages called gems and hosted on RubyGems.org. The plugin manager accessed via `bin/logstash-plugin` script is used to manage the
lifecycle of plugins in your Logstash deployment. You can install, remove and upgrade plugins using the Command Line
Interface (CLI) invocations described below.

[IMPORTANT]
.macOS Gatekeeper warnings
====
Apple's rollout of stricter notarization requirements affected the notarization
of the {version} {ls} artifacts. If macOS Catalina displays a dialog when you
first run {ls} that interrupts it, you need to take an action to allow it
to run.
To prevent Gatekeeper checks on the {ls} files, run the following command on the
downloaded `.tar.gz` archive or the directory to which was extracted:
[source,sh]
----
xattr -d -r com.apple.quarantine <archive-or-directory>
----
For example, if the `.tar.gz` file was extracted to the default
logstash-{version} directory, the command is:
[source,sh,subs="attributes"]
----
xattr -d -r com.apple.quarantine logstash-{version}
----
Alternatively, you can add a security override if a Gatekeeper popup appears by
following the instructions in the _How to open an app that hasn’t been notarized
or is from an unidentified developer_ section of
https://support.apple.com/en-us/HT202491[Safely open apps on your Mac].
====

[discrete]
[[listing-plugins]]
=== Listing plugins

Logstash release packages bundle common plugins so you can use them out of the box. To list the plugins currently
available in your deployment:

[source,shell]
----------------------------------
bin/logstash-plugin list <1>
bin/logstash-plugin list --verbose <2>
bin/logstash-plugin list '*namefragment*' <3>
bin/logstash-plugin list --group output <4>
----------------------------------
<1> Lists all installed plugins

<2> Lists installed plugins with version information

<3> Lists all installed plugins containing a namefragment

<4> Lists all installed plugins for a particular group (input, filter, codec, output)

[discrete]
[[installing-plugins]]
=== Adding plugins to your deployment

The most common situation when dealing with plugin installation is when you have access to internet. Using this method,
you will be able to retrieve plugins hosted on the public repository (RubyGems.org) and install on top of your Logstash
installation.

[source,shell]
----------------------------------
bin/logstash-plugin install logstash-output-kafka
----------------------------------

Once the plugin is successfully installed, you can start using it in your configuration file.

[discrete]
[[installing-local-plugins]]
==== Advanced: Adding a locally built plugin

In some cases, you want to install plugins which have not yet been released and not hosted on RubyGems.org. Logstash
provides you the option to install a locally built plugin which is packaged as a ruby gem. Using a file location:

[source,shell]
----------------------------------
bin/logstash-plugin install /path/to/logstash-output-kafka-1.0.0.gem
----------------------------------

[discrete]
[[installing-local-plugins-path]]
==== Advanced: Using `--path.plugins`

Using the Logstash `--path.plugins` flag, you can load a plugin source code located on your file system. Typically this is used by
developers who are iterating on a custom plugin and want to test it before creating a ruby gem.

The path needs to be in a  specific directory hierarchy: `PATH/logstash/TYPE/NAME.rb`, where TYPE is 'inputs' 'filters', 'outputs' or 'codecs' and NAME is the name of the plugin.

[source,shell]
----------------------------------
# supposing the code is in /opt/shared/lib/logstash/inputs/my-custom-plugin-code.rb
bin/logstash --path.plugins /opt/shared/lib
----------------------------------

[discrete]
[[updating-plugins]]
=== Updating plugins

Plugins have their own release cycle and are often released independent of Logstash’s core release cycle. Using the update
subcommand you can get the latest version of the plugin.

[source,shell]
----------------------------------
bin/logstash-plugin update <1>
bin/logstash-plugin update logstash-output-kafka <2>
----------------------------------
<1> Updates all installed plugins

<2> Updates only this plugin

[discrete]
[[plugin-shutdown]]
==== Plugin Shutdown APIs

You have three options for shutting down a plugin: `stop`, `stop?`, and `close`.

* Call the `stop` method from outside the plugin thread. This method signals the plugin to stop.
* The `stop?` method returns `true` when the `stop` method has already been called for that plugin.
* The `close` method performs final bookkeeping and cleanup after the plugin's `run` method and the plugin's thread both
exit. The `close` method is a a new name for the method known as `teardown` in previous versions of Logstash.

The `shutdown`, `finished`, `finished?`, `running?`, and `terminating?` methods are redundant and no longer present in the
Plugin Base class.

Sample code for the plugin shutdown APIs is https://github.com/logstash-plugins/logstash-input-example/blob/master/lib/logstash/inputs/example.rb[available].


[discrete]
[[removing-plugins]]
=== Removing plugins

If you need to remove plugins from your Logstash installation:

[source,shell]
----------------------------------
bin/logstash-plugin remove logstash-output-kafka
----------------------------------

[discrete]
[[http-proxy]]
=== Proxy configuration

The majority of the plugin manager commands require access to the internet to reach https://rubygems.org[RubyGems.org].
If your organization is behind a firewall you can set these environments variables to configure Logstash to use your proxy.

[source, shell]
----------------------------------
export http_proxy=http://localhost:3128
export https_proxy=http://localhost:3128
----------------------------------

[discrete]
[[proxy-plugins]]
=== Proxy support

The previous sections relied on Logstash being able to communicate with RubyGems.org. In certain environments, Forwarding
Proxy is used to handle HTTP requests. Logstash Plugins can be installed and updated through a Proxy by setting the
`HTTP_PROXY` environment variable:

[source,shell]
----------------------------------
export HTTP_PROXY=http://127.0.0.1:3128

bin/logstash-plugin install logstash-output-elasticsearch
----------------------------------

Once set, plugin commands install, update can be used through this proxy.

include::cross-plugin-concepts.asciidoc[]

include::plugin-generator.asciidoc[]

include::offline-plugins.asciidoc[]

include::private-gem-repo.asciidoc[]

include::event-api.asciidoc[]
