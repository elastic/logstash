[[event-api]]
=== Event API

This section is targeted for plugin developers and users of {ls}'s Ruby filter.

Event is the main object that encapsulates data flow internally in {ls} and provides an API for the plugin developers to interact with the event's content.
Typically, this API is used in plugins and in a Ruby filter to retrieve data and use it for transformations.
Event objects contain the original data sent to {ls} and any additional fields created during {ls}'s filter stages.

[[event-api-event-factory]]
==== Creating new Events with `EventFactory`

Beginning with {ls} 7.14, the `EventFactory` is the preferred method of creating Events.
An `EventFactory` is made available to plugins with the `Plugin#event_factory` API.

NOTE: Plugins that need to run on older versions of Logstash can use the https://github.com/logstash-plugins/logstash-mixin-event_support[Event Support mixin], which provides a fallback implementation when run on older {ls} releases.

NOTE: Prior to {ls} 7.14, events were created directly with `LogStash::Event.new`.
      This direct usage is deprecated and may not continue to work in future releases of {ls}.

===== `EventFactory#new_event`

The plugin APIs provide an `event_factory` method, which provides an `EventFactory`.

To create a new `Event` object, simply:

[source,ruby]
---------------------------------
  event = event_factory.new_event
---------------------------------

If you wish for the event to be pre-constructed with data, you may pass a ruby Hash:

[source,ruby]
---------------------------------
  event = event_factory.new_event("message" => "hello, world!")
---------------------------------

[float]
==== Getting the current value of a field with `Event#get`

The getter is a read-only access of field-based data in an Event.

**Syntax:** `event.get(field)`

**Returns:** Value for this field or nil if the field does not exist. Returned values could be a string, 
numeric or timestamp scalar value.

`field` is a structured field sent to Logstash or created after the transformation process.
`field` can also be a nested <<field-references-deepdive,field reference>> such as `[field][bar]`.

Examples:

[source,ruby]
--------------------------------------------------
event.get("foo" ) # => "baz"
event.get("[foo]") # => "zab"
event.get("[foo][bar]") # => 1
event.get("[foo][bar]") # => 1.0
event.get("[foo][bar]") # =>  [1, 2, 3]
event.get("[foo][bar]") # => {"a" => 1, "b" => 2}
event.get("[foo][bar]") # =>  {"a" => 1, "b" => 2, "c" => [1, 2]}
--------------------------------------------------

Accessing @metadata

[source,ruby]
--------------------------------------------------
event.get("[@metadata][foo]") # => "baz"
--------------------------------------------------

[float]
==== Setting fields with `Event#set`

This API can be used to mutate data in an Event. 

**Syntax:** `event.set(field, value)`

**Returns:** The value that was set.

Examples:

[source,ruby]
--------------------------------------------------
event.set("foo", "baz")
event.set("[foo]", "zab")
event.set("[foo][bar]", 1)
event.set("[foo][bar]", 1.0)
event.set("[foo][bar]", [1, 2, 3])
event.set("[foo][bar]", {"a" => 1, "b" => 2})
event.set("[foo][bar]", {"a" => 1, "b" => 2, "c" => [1, 2]})
event.set("[@metadata][foo]", "baz")
--------------------------------------------------

Mutating a collection after setting it in the Event has an undefined behaviour and is not allowed.
After mutating a retrieved field, you must set the field with the result.

[source,ruby]
--------------------------------------------------
h = {"a" => 1, "b" => 2, "c" => [1, 2]}
event.set("[foo][bar]", h)

h["c"] = [3, 4]
event.get("[foo][bar][c]") # => undefined

Suggested way of mutating collections:

h = {"a" => 1, "b" => 2, "c" => [1, 2]}
event.set("[foo][bar]", h)

h["c"] = [3, 4]
event.set("[foo][bar]", h)

# Alternatively,
event.set("[foo][bar][c]", [3, 4]) 
--------------------------------------------------

[float]
==== Removing a field with `Event#remove`

This API can be used to remove a field entirely.

**Syntax:** `event.remove(field)`

**Returns:** The value of the field prior to its removal.

Examples:

[source,ruby]
--------------------------------------------------
event.set("[foo]", "zab")
event.include?("[foo]") # => true
event.include?("[bar]") # => false
--------------------------------------------------

[float]
==== Testing a field's presence with `Event#include?`

This API can be used to determine whether a field has been set.

**Syntax:** `event.include?(field)`

**Returns:**  `true` if the field has been set; otherwise `false`.

Examples:

[source,ruby]
--------------------------------------------------
event.set("[foo]", "zab")
event.include?("[foo]") # => true
event.remove("[foo]")   # => "zab"
event.include?("[foo]") # => false
--------------------------------------------------

[float]
==== Cancelling an event with `Event#cancel`

An Event that has been cancelled will not be routed to additional filters or outputs.

**Syntax:** `event.cancel`

**Returns:**  `true`.

[source,ruby]
--------------------------------------------------
event.cancel # => true
--------------------------------------------------

[float]
==== Un-cancelling an event with `Event#uncancel`

An Event that has been cancelled can be un-cancelled to ensure that it _is_ processed by subsequent filters and outputs.

**Syntax:** `event.cancel`

**Returns:**  `false`.

[source,ruby]
--------------------------------------------------
event.uncancel # => false
--------------------------------------------------

[float]
==== Determining cancellation status with `Event#cancelled?`

An Event's cancellation status can be queried to determine whether it will be processed by subsequent filters and outputs.

**Syntax:** `event.cancelled?`

**Returns:**  `true` or `false`.

[source,ruby]
--------------------------------------------------
event.cancel #=> true
event.cancelled? # => true
event.uncancel # => false
event.cancelled? # => false
--------------------------------------------------

[float]
==== Ruby Filter

The <<plugins-filters-ruby,Ruby Filter>> can be used to execute any ruby code and manipulate event data using the API described above.
For example, using the API:

[source,ruby]
--------------------------------------------------
filter {
  ruby {
    code => 'event.set("lowercase_field", event.get("message").downcase)'
  }  
}    
--------------------------------------------------

This filter will lowercase the `message` field, and set it to a new field called `lowercase_field`

