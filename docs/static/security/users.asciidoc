[role="xpack"]
[[ls-grant-access]]
=== Grant users access to secured resources
[subs="attributes"]

You can use role-based access control to grant users access to secured
resources. The roles that you set up depend on your organization's security
requirements and the minimum privileges required to use specific features.

Typically you need the create the following roles:

* <<create-writer-role,writer role>> for publishing events
* <<create-reader-role,reader role>> so that users can access the indices {ls} creates

{es-security-features} provide {ref}/built-in-roles.html[built-in roles] that
grant a subset of the privileges needed by {ls} users. 
For example, `logstash_admin` is a built-in role that provides access to `.logstash-*`
indices for managing configurations.

When possible, use the built-in roles to minimize the affect of future changes
on your security strategy.

NOTE: You can assign roles and privileges to **API keys** as an alternative to
using usernames and passwords. See <<ls-api-keys>> for more information on that
alternate approach to security.


[[ls-http-auth-basic]]
==== Configure Logstash to use basic authentication
[subs="attributes"]

Logstash must be able to manage index templates, create indices,
and write and delete documents in the indices it creates.

To set up authentication credentials for Logstash, you need to:

. Create a <<create-writer-role,writer role>>, and grant it cluster and indices
privileges.
+
Example: `logstash_writer`
. Create an <<create-internal-user,internal user>>, and assign the
`logstash_writer` role to it.
+
Example: `logstash_internal`

. Configure {ls} to <<auth-int-user,authenticate using the internal user>>.


[[create-writer-role]]
===== Create a writer role

Use the **Management > Roles** UI in {kib} or the `role` API to create a
*writer* role (`logstash_writer`, for example). 
Add these *cluster* privileges:

* `manage_index_templates`
* `monitor` (to allow retrieving cluster details, such as version)
* `manage_ilm` (for use with {ref}/getting-started-index-lifecycle-management.html[index lifecycle
management])

Add these *indices* privileges: 

* `write`
* `create`
* `delete`
* `create_index` (to allow creating daily indices on clusters that do not support ILM. 
Not needed when using ILM.)
* `manage`
* `manage_ilm` (for use with {ref}/getting-started-index-lifecycle-management.html[index lifecycle
management])

Omit any privileges that arenâ€™t relevant in your environment.

[source, sh]
---------------------------------------------------------------
POST _security/role/logstash_writer
{
  "cluster": ["manage_index_templates", "monitor", "manage_ilm"], <1>
  "indices": [
    {
      "names": [ "logstash-*" ], <2>
      "privileges": ["write","create","delete","create_index","manage","manage_ilm"]  <3>
    }
  ]
}
---------------------------------------------------------------
<1> The cluster needs the `manage_ilm` privilege if 
{ref}/getting-started-index-lifecycle-management.html[index lifecycle management]
is enabled.
<2> If you use a custom Logstash index pattern, specify your custom pattern
instead of the default `logstash-*` pattern.
<3> If {ref}/getting-started-index-lifecycle-management.html[index lifecycle
management] is enabled, the role requires the `manage` and `manage_ilm`
privileges to load index lifecycle policies, create rollover aliases, and create
and manage rollover indices.

[[create-internal-user]]
===== Create an internal user

Create a `logstash_internal` user and assign it the `logstash_writer` role.
You can create users from the **Management > Users** UI in {kib} or through
the `user` API:

[source, sh]
---------------------------------------------------------------
POST _security/user/logstash_internal
{
  "password" : "x-pack-test-password",
  "roles" : [ "logstash_writer"],
  "full_name" : "Internal Logstash User"
}
---------------------------------------------------------------

[[auth-int-user]]
===== Configure {ls} to authenticate as the internal user

Configure Logstash to authenticate as the `logstash_internal` user you just
created. Configure credentials separately for each of the {es} plugins in
your Logstash `.conf` file. For example:

[source,js]
--------------------------------------------------
input {
  elasticsearch {
    ...
    user => logstash_internal
    password => x-pack-test-password
  }
}
filter {
  elasticsearch {
    ...
    user => logstash_internal
    password => x-pack-test-password
  }
}
output {
  elasticsearch {
    ...
    user => logstash_internal
    password => x-pack-test-password
  }
}
--------------------------------------------------


[[ls-user-access]]
==== Grant users access to the {ls} indices

Users must be able to access the indices {ls} creates.
To grant access to the [ls] indices:

. Create a <<create-reader-role,reader role>>, and grant it appropriate privileges. 
+
Example: `logstash_reader`

. <<assign-reader-role,Assign reader role>> to users.


[[create-reader-role]]
==== Create a reader role

Create a `logstash_reader` role that has the `read` and `view_index_metadata`
privileges  for the Logstash indices. You can create roles from the
**Management > Roles** UI in {kib} or through the `role` API.

Add these index privileges to allow users to access the indices that {ls}
creates:

* `read` 
* `view_index_metadata` 


[source, sh]
---------------------------------------------------------------
POST _security/role/logstash_reader
{
  "indices": [
    {
      "names": [ "logstash-*" ], <1>
      "privileges": ["read","view_index_metadata"]
    }
  ]
}
---------------------------------------------------------------
<1> If you use a custom Logstash index pattern, specify that pattern
instead of the default `logstash-*` pattern.





[[assign-reader-role]]
==== Assign reader role to users

Assign your Logstash users the `logstash_reader` role. If the Logstash user
will be using
{logstash-ref}/logstash-centralized-pipeline-management.html[centralized pipeline management],
also assign the `logstash_admin` role. You can create and manage users from the
**Management > Users** UI in {kib} or through the `user` API:

[source, sh]
---------------------------------------------------------------
POST _security/user/logstash_user
{
  "password" : "x-pack-test-password",
  "roles" : [ "logstash_reader", "logstash_admin"], <1>
  "full_name" : "Kibana User for Logstash"
}
---------------------------------------------------------------
<1> `logstash_admin` is a built-in role that provides access to `.logstash-*`
indices for managing configurations.


[role="xpack"]
[[ls-monitoring-user]]
==== Configure Credentials for Logstash Monitoring

If you plan to ship Logstash {logstash-ref}/configuring-logstash.html[monitoring]
data to a secure cluster, you need to configure the username and password that
Logstash uses to authenticate for shipping monitoring data.

The {security-features} come preconfigured with a
{ref}/built-in-users.html[`logstash_system` built-in user]
for this purpose. This user has the minimum permissions necessary for the
monitoring function, and _should not_ be used for any other purpose. It is
specifically _not intended_ for use within a Logstash pipeline.

By default, the `logstash_system` user does not have a password. The user will
not be enabled until you set a password. See
{ref}/built-in-users.html#set-built-in-user-passwords[Setting built-in user passwords].

Then configure the user and password in the `logstash.yml` configuration file:

[source,yaml]
----------------------------------------------------------
xpack.monitoring.elasticsearch.username: logstash_system
xpack.monitoring.elasticsearch.password: t0p.s3cr3t
----------------------------------------------------------

If you initially installed an older version of {xpack} and then upgraded, the
`logstash_system` user may have defaulted to `disabled` for security reasons.
You can enable the user through the `user` API:

[source,js]
---------------------------------------------------------------------
PUT _security/user/logstash_system/_enable
---------------------------------------------------------------------
// CONSOLE


[role="xpack"]
[[ls-pipeline-management-user]]
==== Configure Credentials for Centralized Pipeline Management

If you plan to use Logstash
{logstash-ref}/logstash-centralized-pipeline-management.html[centralized pipeline management],
you need to configure the username and password that Logstash uses for managing
configurations.

You configure the user and password in the `logstash.yml` configuration file:

[source,yaml]
----------------------------------------------------------
xpack.management.elasticsearch.username: logstash_admin_user <1>
xpack.management.elasticsearch.password: t0p.s3cr3t
----------------------------------------------------------
<1> The user you specify here must have the built-in `logstash_admin` role as
well as the `logstash_writer` role that you created earlier.
