[[ls-k8s-quick-start]]
== Quick start

preview::[]

This guide describes how to set up {ls} to monitor a Kubernetes environment running on Minikube. Kubernetes logs and metrics will be monitored by Filebeat and Metricbeat, respectively, processed through a Logstash pipeline, and then delivered into an Elasticsearch cluster in the Kubernetes environment.

This section includes the following topics:

* <<qs-prerequisites>>
* <<qs-set-up>>
* <<qs-generate-certificate>>
* <<qs-create-elastic-stack>>
* <<qs-view-monitoring-data>>
* <<qs-tidy-up>>
* <<qs-learn-more>>

[float]
[[qs-prerequisites]]
=== Prerequisites

Before you start, there are a few things you'll need:

. link:https://helm.sh/[Helm] - The package manager for Kubernetes. We'll use Helm to access the Elastic Kubernetes resources. 
. link:https://minikube.sigs.k8s.io[Minikube] - Easily run a single node Kubernetes cluster on your system. Check the `Getting Started` section for install and set up instructions.
. link:https://github.com/elastic/logstash/blob/main/docsk8s/sample-files/logstash-k8s-gs.zip[Sample configuration files] - Download and expand this set of files into an empty directory on your local system.

[float]
[[qs-set-up]]
=== Set up your environment

Let's start by getting your Minikube Kubernetes cluster up and running:

[source,sh]
--
minikube start
--

The Elastic Helm repository contains the Elastic Stack custom resource definition (CRD) files. Add the repository to your Helm repository list:

[source,sh]
--
helm repo add elastic https://helm.elastic.co && helm repo update
--

Install the `elastic-operator` custom controller, which will be used to manage the Elastic resources in your cluster:

[source,sh]
--
helm install elastic-operator elastic/eck-operator
--

Check the Kubernetes pods status to confirm that the `elastic-operator` pod is running:

[source,sh]
--
kubectl get pods
--

[source,sh]
--
NAME                 READY   STATUS    RESTARTS      AGE
elastic-operator-0   1/1     Running   4 (12m ago)   13d
--

[float]
[[qs-generate-certificate]]
=== Generate certificate files

To enable secure communication throughout your Kubernetes resources, run the sample script to generate CA certificate files:

[source,sh]
--
./cert/generate_cert.sh
--

[source,sh]
--
Generating RSA private key, 2048 bit long modulus
.......................+++
...........................................................................+++
e is 65537 (0x10001)
Generating RSA private key, 2048 bit long modulus
..............................................+++
.............................................+++
e is 65537 (0x10001)
Signature ok
subject=/C=EU/ST=NA/O=Elastic/CN=ServerHostName
Getting CA Private Key
Generating RSA private key, 2048 bit long modulus
............+++
.......................................................................................................................................+++
e is 65537 (0x10001)
Signature ok
subject=/C=EU/ST=NA/O=Elastic/CN=ClientName
Getting CA Private Key
--

Your `logstash-k8s-gs/cert` folder should now contain a set of certificate files, including `client` certificates for Filebeat and Metricbeat, and `server` certificates for Logstash. 

The parent `logstash-k8s-gs` directory also has a new `001-secret.yaml` resources file that stores a hash of the client and server certificates.

image::./images/gs-cert-files.png[generated CA certificate files]

[float]
[[qs-create-elastic-stack]]
=== Create an Elastic Stack

Now that your environment and certificates are set up, it's time to create an Elastic Stack. Run the following command to deploy the example using the sample CRDs:

[source,sh]
--
kubectl apply -f .
--

The resources are created:

[source,sh]
--
elasticsearch.elasticsearch.k8s.elastic.co/demo created
configmap/logstash-pipeline created
configmap/logstash-config created
secret/logstash-beats-tls created
deployment.apps/logstash created
service/logstash created
horizontalpodautoscaler.autoscaling/logstash created
beat.beat.k8s.elastic.co/demo created
beat.beat.k8s.elastic.co/demo configured
kibana.kibana.k8s.elastic.co/demo created
--

[source,sh]
--
kubectl get pods
--

The pods are up and running! It may take two or three minutes for all of them to be ready.

[source,sh]
--
NAME                                    READY   STATUS    RESTARTS       AGE
demo-beat-filebeat-7f4d97f69f-qkkbl     1/1     Running   0              42s
demo-beat-metricbeat-59f4b68cc7-9zrrn   1/1     Running   0              39s
demo-es-default-0                       1/1     Running   0              41s
demo-kb-d7f585494-vbf6s                 0/1     Running   0              39s
elastic-operator-0                      1/1     Running   4 (164m ago)   13d
logstash-7974b9ccb9-jd5xl               1/1     Running   0              42s
--

[float]
[[qs-view-monitoring-data]]
=== View the monitoring data

Now that your monitoring data is flowing, let's access it in Kibana.

[float]
[[qs-tidy-up]]
=== Tidy up

I am a cleaning up section!

[float]
[[qs-learn-more]]
=== Learn more

Now that you're familiar with how to get a Logstash and Kubernetes environment up and running, here are a few suggested next steps:

* <<ls-k8s-external-resource>>
* <<ls-k8s-designing>>
* <<ls-k8s-sizing>>
* <<ls-k8s-secure>>
* <<ls-k8s-stack-monitoring>>

As well, we have a variety of <<ls-k8s-recipes,recipes>> that you can use as templates to configure an environment to match your specific use case.
