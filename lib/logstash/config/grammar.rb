# Autogenerated from a Treetop grammar. Edits may be lost.


require "treetop"
require "logstash/config/config_ast"

module LogStashConfig
  include Treetop::Runtime

  def root
    @root ||= :config
  end

  include LogStash::Config::AST

  module Config0
    def _
      elements[0]
    end

    def _item
      elements[1]
    end
  end

  module Config1
    def _1
      elements[0]
    end

    def _item
      elements[1]
    end

    def _2
      elements[2]
    end

    def _items
      elements[3]
    end

    def _3
      elements[4]
    end
  end

  def _nt_config
    start_index = index
    if node_cache[:config].has_key?(index)
      cached = node_cache[:config][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__
    s0 << r1
    if r1
      r2 = _nt_plugin_section
      s0 << r2
      if r2
        r3 = _nt__
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            i5, s5 = index, []
            r6 = _nt__
            s5 << r6
            if r6
              r7 = _nt_plugin_section
              s5 << r7
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(Config0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
          if r4
            r8 = _nt__
            s0 << r8
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Config,input, i0...index, s0)
      r0.extend(Config1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:config][start_index] = r0

    r0
  end

  module Comment0
  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      r3 = _nt_whitespace
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if has_terminal?("#", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("#")
          r4 = nil
        end
        s1 << r4
        if r4
          s5, i5 = [], index
          loop do
            if has_terminal?('\G[^\\r\\n]', true, index)
              r6 = true
              @index += 1
            else
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s1 << r5
          if r5
            if has_terminal?("\r", false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\r")
              r8 = nil
            end
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r7
            if r7
              if has_terminal?("\n", false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("\n")
                r9 = nil
              end
              s1 << r9
            end
          end
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Comment0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:comment][start_index] = r0

    r0
  end

  def _nt__
    start_index = index
    if node_cache[:_].has_key?(index)
      cached = node_cache[:_][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_comment
      if r2
        r1 = r2
      else
        r3 = _nt_whitespace
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(Whitespace,input, i0...index, s0)

    node_cache[:_][start_index] = r0

    r0
  end

  def _nt_whitespace
    start_index = index
    if node_cache[:whitespace].has_key?(index)
      cached = node_cache[:whitespace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t\\r\\n]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Whitespace,input, i0...index, s0)
    end

    node_cache[:whitespace][start_index] = r0

    r0
  end

  module OptionalComma0
    def whitespace
      elements[0]
    end

    def _
      elements[1]
    end
  end

  def _nt_optional_comma
    start_index = index
    if node_cache[:optional_comma].has_key?(index)
      cached = node_cache[:optional_comma][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_whitespace
    s1 << r2
    if r2
      r3 = _nt__
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(OptionalComma0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r4 = _nt_comma
      if r4
        r0 = r4
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:optional_comma][start_index] = r0

    r0
  end

  module Comma0
    def _1
      elements[0]
    end

    def _2
      elements[2]
    end
  end

  def _nt_comma
    start_index = index
    if node_cache[:comma].has_key?(index)
      cached = node_cache[:comma][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__
    s0 << r1
    if r1
      if has_terminal?(",", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(",")
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt__
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comma0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comma][start_index] = r0

    r0
  end

  module KeyValueSeparator0
    def _1
      elements[0]
    end

    def _2
      elements[2]
    end
  end

  def _nt_key_value_separator
    start_index = index
    if node_cache[:key_value_separator].has_key?(index)
      cached = node_cache[:key_value_separator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt__
    s0 << r1
    if r1
      i2 = index
      if has_terminal?("=>", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("=>")
        r3 = nil
      end
      if r3
        r2 = r3
      else
        if has_terminal?(":", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(":")
          r4 = nil
        end
        if r4
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
      if r2
        r5 = _nt__
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(KeyValueSeparator0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:key_value_separator][start_index] = r0

    r0
  end

  module PluginSection0
    def branch_or_plugin
      elements[0]
    end

    def _
      elements[1]
    end
  end

  module PluginSection1
    def plugin_type
      elements[0]
    end

    def _1
      elements[1]
    end

    def _2
      elements[3]
    end

  end

  def _nt_plugin_section
    start_index = index
    if node_cache[:plugin_section].has_key?(index)
      cached = node_cache[:plugin_section][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_plugin_type
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        if has_terminal?("{", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("{")
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt__
          s0 << r4
          if r4
            s5, i5 = [], index
            loop do
              i6, s6 = index, []
              r7 = _nt_branch_or_plugin
              s6 << r7
              if r7
                r8 = _nt__
                s6 << r8
              end
              if s6.last
                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                r6.extend(PluginSection0)
              else
                @index = i6
                r6 = nil
              end
              if r6
                s5 << r6
              else
                break
              end
            end
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            s0 << r5
            if r5
              if has_terminal?("}", false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("}")
                r9 = nil
              end
              s0 << r9
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(PluginSection,input, i0...index, s0)
      r0.extend(PluginSection1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:plugin_section][start_index] = r0

    r0
  end

  def _nt_branch_or_plugin
    start_index = index
    if node_cache[:branch_or_plugin].has_key?(index)
      cached = node_cache[:branch_or_plugin][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_branch
    if r1
      r0 = r1
    else
      r2 = _nt_plugin
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:branch_or_plugin][start_index] = r0

    r0
  end

  def _nt_plugin_type
    start_index = index
    if node_cache[:plugin_type].has_key?(index)
      cached = node_cache[:plugin_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("input", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure("input")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("filter", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure("filter")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("output", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure("output")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:plugin_type][start_index] = r0

    r0
  end

  module Plugins0
    def _
      elements[0]
    end

    def plugin
      elements[1]
    end
  end

  module Plugins1
    def plugin
      elements[0]
    end

  end

  def _nt_plugins
    start_index = index
    if node_cache[:plugins].has_key?(index)
      cached = node_cache[:plugins][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i1, s1 = index, []
    r2 = _nt_plugin
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r5 = _nt__
        s4 << r5
        if r5
          r6 = _nt_plugin
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Plugins0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Plugins1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:plugins][start_index] = r0

    r0
  end

  module Plugin0
    def optional_comma
      elements[0]
    end

    def _item
      elements[1]
    end
  end

  module Plugin1
    def _item
      elements[0]
    end

    def _items
      elements[1]
    end
  end

  module Plugin2
    def name
      elements[0]
    end

    def _1
      elements[1]
    end

    def _2
      elements[3]
    end

    def _items
      elements[4]
    end

    def _3
      elements[5]
    end

  end

  def _nt_plugin
    start_index = index
    if node_cache[:plugin].has_key?(index)
      cached = node_cache[:plugin][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_name
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        if has_terminal?("{", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("{")
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt__
          s0 << r4
          if r4
            i6, s6 = index, []
            r7 = _nt_attribute
            s6 << r7
            if r7
              s8, i8 = [], index
              loop do
                i9, s9 = index, []
                r10 = _nt_optional_comma
                s9 << r10
                if r10
                  r11 = _nt_attribute
                  s9 << r11
                end
                if s9.last
                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                  r9.extend(Plugin0)
                else
                  @index = i9
                  r9 = nil
                end
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s6 << r8
            end
            if s6.last
              r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
              r6.extend(Plugin1)
            else
              @index = i6
              r6 = nil
            end
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              r12 = _nt__
              s0 << r12
              if r12
                if has_terminal?("}", false, index)
                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("}")
                  r13 = nil
                end
                s0 << r13
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Plugin,input, i0...index, s0)
      r0.extend(Plugin2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:plugin][start_index] = r0

    r0
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[A-Za-z0-9_-]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(UnicodeValue,input, i1...index, s1)
    end
    if r1
      r0 = r1
    else
      r3 = _nt_string
      if r3
        r0 = r3
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:name][start_index] = r0

    r0
  end

  module Attribute0
    def name
      elements[0]
    end

    def key_value_separator
      elements[1]
    end

    def value
      elements[2]
    end
  end

  def _nt_attribute
    start_index = index
    if node_cache[:attribute].has_key?(index)
      cached = node_cache[:attribute][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_name
    s0 << r1
    if r1
      r2 = _nt_key_value_separator
      s0 << r2
      if r2
        i3 = index
        r4 = _nt_plugin
        if r4
          r3 = r4
        else
          r5 = _nt_value
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(KVPair,input, i0...index, s0)
      r0.extend(Attribute0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:attribute][start_index] = r0

    r0
  end

  def _nt_value
    start_index = index
    if node_cache[:value].has_key?(index)
      cached = node_cache[:value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_null
    if r1
      r0 = r1
    else
      r2 = _nt_boolean
      if r2
        r0 = r2
      else
        r3 = _nt_bareword
        if r3
          r0 = r3
        else
          r4 = _nt_string
          if r4
            r0 = r4
          else
            r5 = _nt_regexp
            if r5
              r0 = r5
            else
              r6 = _nt_number
              if r6
                r0 = r6
              else
                r7 = _nt_array
                if r7
                  r0 = r7
                else
                  r8 = _nt_hash
                  if r8
                    r0 = r8
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:value][start_index] = r0

    r0
  end

  module Null0
    def content
      'nil'
    end
  end

  def _nt_null
    start_index = index
    if node_cache[:null].has_key?(index)
      cached = node_cache[:null][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("null", false, index)
      r0 = instantiate_node(Value,input, index...(index + 4))
      r0.extend(Null0)
      @index += 4
    else
      terminal_parse_failure("null")
      r0 = nil
    end

    node_cache[:null][start_index] = r0

    r0
  end

  def _nt_boolean
    start_index = index
    if node_cache[:boolean].has_key?(index)
      cached = node_cache[:boolean][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("true", false, index)
      r1 = instantiate_node(Value,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure("true")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("false", false, index)
        r2 = instantiate_node(Value,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure("false")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:boolean][start_index] = r0

    r0
  end

  module Bareword0
  end

  def _nt_bareword
    start_index = index
    if node_cache[:bareword].has_key?(index)
      cached = node_cache[:bareword][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Za-z_]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[A-Za-z0-9_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(UnicodeValue,input, i0...index, s0)
      r0.extend(Bareword0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:bareword][start_index] = r0

    r0
  end

  module DoubleQuotedString0
  end

  module DoubleQuotedString1
  end

  module DoubleQuotedString2
    def content
      json_parse_value(text_value)
    end
  end

  def _nt_double_quoted_string
    start_index = index
    if node_cache[:double_quoted_string].has_key?(index)
      cached = node_cache[:double_quoted_string][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        if has_terminal?("\\", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\\")
          r5 = nil
        end
        s4 << r5
        if r5
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(DoubleQuotedString0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if has_terminal?('\G[^\\"]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          if r7
            r3 = r7
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r8 = nil
        end
        s0 << r8
      end
    end
    if s0.last
      r0 = instantiate_node(UnicodeValue,input, i0...index, s0)
      r0.extend(DoubleQuotedString1)
      r0.extend(DoubleQuotedString2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:double_quoted_string][start_index] = r0

    r0
  end

  module SingleQuotedString0
  end

  module SingleQuotedString1
    def content
      elements[1]
    end

  end

  def _nt_single_quoted_string
    start_index = index
    if node_cache[:single_quoted_string].has_key?(index)
      cached = node_cache[:single_quoted_string][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("'", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("'")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?("'", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(SingleQuotedString0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?("'", false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(UnicodeValue,input, i0...index, s0)
      r0.extend(SingleQuotedString1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:single_quoted_string][start_index] = r0

    r0
  end

  def _nt_string
    start_index = index
    if node_cache[:string].has_key?(index)
      cached = node_cache[:string][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_double_quoted_string
    if r1
      r0 = r1
    else
      r2 = _nt_single_quoted_string
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:string][start_index] = r0

    r0
  end

  module Regexp0
  end

  module Regexp1
    def content
      elements[1]
    end

  end

  def _nt_regexp
    start_index = index
    if node_cache[:regexp].has_key?(index)
      cached = node_cache[:regexp][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('/', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('/')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?('\/', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('\/')
          r4 = nil
        end
        if r4
          r3 = r4
        else
          i5, s5 = index, []
          i6 = index
          if has_terminal?('/', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('/')
            r7 = nil
          end
          if r7
            r6 = nil
          else
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r6
          if r6
            if index < input_length
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r8 = nil
            end
            s5 << r8
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Regexp0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('/', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('/')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(RegexpValue,input, i0...index, s0)
      r0.extend(Regexp1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:regexp][start_index] = r0

    r0
  end

  module Number0
  end

  module Number1
  end

  module Number2
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("-", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("-")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
      if r3
        i6, s6 = index, []
        if has_terminal?(".", false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(".")
          r7 = nil
        end
        s6 << r7
        if r7
          s8, i8 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r9 = true
              @index += 1
            else
              r9 = nil
            end
            if r9
              s8 << r9
            else
              break
            end
          end
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          s6 << r8
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Number0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          i11, s11 = index, []
          if has_terminal?('\G[eE]', true, index)
            r12 = true
            @index += 1
          else
            r12 = nil
          end
          s11 << r12
          if r12
            if has_terminal?('\G[+-]', true, index)
              r14 = true
              @index += 1
            else
              r14 = nil
            end
            if r14
              r13 = r14
            else
              r13 = instantiate_node(SyntaxNode,input, index...index)
            end
            s11 << r13
            if r13
              s15, i15 = [], index
              loop do
                if has_terminal?('\G[0-9]', true, index)
                  r16 = true
                  @index += 1
                else
                  r16 = nil
                end
                if r16
                  s15 << r16
                else
                  break
                end
              end
              if s15.empty?
                @index = i15
                r15 = nil
              else
                r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
              end
              s11 << r15
            end
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(Number1)
          else
            @index = i11
            r11 = nil
          end
          if r11
            r10 = r11
          else
            r10 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r10
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Value,input, i0...index, s0)
      r0.extend(Number2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Array0
    def comma
      elements[0]
    end

    def _item
      elements[1]
    end
  end

  module Array1
    def _item
      elements[0]
    end

    def _items
      elements[1]
    end
  end

  module Array2
    def _1
      elements[1]
    end

    def _items
      elements[2]
    end

    def _2
      elements[3]
    end

  end

  def _nt_array
    start_index = index
    if node_cache[:array].has_key?(index)
      cached = node_cache[:array][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("[", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("[")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        i4, s4 = index, []
        r5 = _nt_value
        s4 << r5
        if r5
          s6, i6 = [], index
          loop do
            i7, s7 = index, []
            r8 = _nt_comma
            s7 << r8
            if r8
              r9 = _nt_value
              s7 << r9
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(Array0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Array1)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r10 = _nt__
          s0 << r10
          if r10
            if has_terminal?("]", false, index)
              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("]")
              r11 = nil
            end
            s0 << r11
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(CompositeValue,input, i0...index, s0)
      r0.extend(Array2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:array][start_index] = r0

    r0
  end

  module Hash0
    def optional_comma
      elements[0]
    end

    def _item
      elements[1]
    end
  end

  module Hash1
    def _item
      elements[0]
    end

    def _items
      elements[1]
    end
  end

  module Hash2
    def _1
      elements[1]
    end

    def _items
      elements[2]
    end

    def _2
      elements[3]
    end

  end

  def _nt_hash
    start_index = index
    if node_cache[:hash].has_key?(index)
      cached = node_cache[:hash][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("{", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("{")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        i4, s4 = index, []
        r5 = _nt_hashentry
        s4 << r5
        if r5
          s6, i6 = [], index
          loop do
            i7, s7 = index, []
            r8 = _nt_optional_comma
            s7 << r8
            if r8
              r9 = _nt_hashentry
              s7 << r9
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(Hash0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Hash1)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r10 = _nt__
          s0 << r10
          if r10
            if has_terminal?("}", false, index)
              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("}")
              r11 = nil
            end
            s0 << r11
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(CompositeValue,input, i0...index, s0)
      r0.extend(Hash2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:hash][start_index] = r0

    r0
  end

  module Hashentry0
    def name
      elements[0]
    end

    def key_value_separator
      elements[1]
    end

    def value
      elements[2]
    end
  end

  def _nt_hashentry
    start_index = index
    if node_cache[:hashentry].has_key?(index)
      cached = node_cache[:hashentry][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_number
    if r2
      r1 = r2
    else
      r3 = _nt_bareword
      if r3
        r1 = r3
      else
        r4 = _nt_string
        if r4
          r1 = r4
        else
          @index = i1
          r1 = nil
        end
      end
    end
    s0 << r1
    if r1
      r5 = _nt_key_value_separator
      s0 << r5
      if r5
        r6 = _nt_value
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(KVPair,input, i0...index, s0)
      r0.extend(Hashentry0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:hashentry][start_index] = r0

    r0
  end

  module Branch0
    def _
      elements[0]
    end

    def else_if
      elements[1]
    end
  end

  module Branch1
    def _
      elements[0]
    end

    def else
      elements[1]
    end
  end

  module Branch2
    def if
      elements[0]
    end

  end

  def _nt_branch
    start_index = index
    if node_cache[:branch].has_key?(index)
      cached = node_cache[:branch][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_if
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt__
        s3 << r4
        if r4
          r5 = _nt_else_if
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Branch0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        i7, s7 = index, []
        r8 = _nt__
        s7 << r8
        if r8
          r9 = _nt_else
          s7 << r9
        end
        if s7.last
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          r7.extend(Branch1)
        else
          @index = i7
          r7 = nil
        end
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(BranchSet,input, i0...index, s0)
      r0.extend(Branch2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:branch][start_index] = r0

    r0
  end

  module If0
    def _1
      elements[1]
    end

    def condition
      elements[2]
    end

    def _2
      elements[3]
    end

    def branch_body
      elements[4]
    end
  end

  def _nt_if
    start_index = index
    if node_cache[:if].has_key?(index)
      cached = node_cache[:if][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("if", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("if")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        r3 = _nt_condition
        s0 << r3
        if r3
          r4 = _nt__
          s0 << r4
          if r4
            r5 = _nt_branch_body
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Branch,input, i0...index, s0)
      r0.extend(If0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:if][start_index] = r0

    r0
  end

  module ElseIf0
    def _1
      elements[1]
    end

    def _2
      elements[3]
    end

    def condition
      elements[4]
    end

    def _3
      elements[5]
    end

    def branch_body
      elements[6]
    end
  end

  module ElseIf1
    def keyword
      "elsif"
    end
  end

  def _nt_else_if
    start_index = index
    if node_cache[:else_if].has_key?(index)
      cached = node_cache[:else_if][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("else", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure("else")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        if has_terminal?("if", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("if")
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt__
          s0 << r4
          if r4
            r5 = _nt_condition
            s0 << r5
            if r5
              r6 = _nt__
              s0 << r6
              if r6
                r7 = _nt_branch_body
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Branch,input, i0...index, s0)
      r0.extend(ElseIf0)
      r0.extend(ElseIf1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:else_if][start_index] = r0

    r0
  end

  module Else0
    def _
      elements[1]
    end

    def branch_body
      elements[2]
    end
  end

  def _nt_else
    start_index = index
    if node_cache[:else].has_key?(index)
      cached = node_cache[:else][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("else", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure("else")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        r3 = _nt_branch_body
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(Branch,input, i0...index, s0)
      r0.extend(Else0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:else][start_index] = r0

    r0
  end

  module BranchBody0
    def branch_or_plugin
      elements[0]
    end

    def _
      elements[1]
    end
  end

  module BranchBody1
    def _
      elements[1]
    end

    def body
      elements[2]
    end

  end

  def _nt_branch_body
    start_index = index
    if node_cache[:branch_body].has_key?(index)
      cached = node_cache[:branch_body][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("{", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("{")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          r5 = _nt_branch_or_plugin
          s4 << r5
          if r5
            r6 = _nt__
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(BranchBody0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          if has_terminal?("}", false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("}")
            r7 = nil
          end
          s0 << r7
        end
      end
    end
    if s0.last
      r0 = instantiate_node(BranchBody,input, i0...index, s0)
      r0.extend(BranchBody1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:branch_body][start_index] = r0

    r0
  end

  module Condition0
    def _1
      elements[0]
    end

    def _2
      elements[2]
    end

    def expression
      elements[3]
    end
  end

  module Condition1
    def expression
      elements[0]
    end

  end

  def _nt_condition
    start_index = index
    if node_cache[:condition].has_key?(index)
      cached = node_cache[:condition][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt__
        s3 << r4
        if r4
          i5 = index
          r6 = _nt_and_op
          if r6
            r5 = r6
          else
            r7 = _nt_or_op
            if r7
              r5 = r7
            else
              r8 = _nt_xor_op
              if r8
                r5 = r8
              else
                r9 = _nt_nand_op
                if r9
                  r5 = r9
                else
                  @index = i5
                  r5 = nil
                end
              end
            end
          end
          s3 << r5
          if r5
            r10 = _nt__
            s3 << r10
            if r10
              r11 = _nt_expression
              s3 << r11
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Condition0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Parenthesised,input, i0...index, s0)
      r0.extend(Condition1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:condition][start_index] = r0

    r0
  end

  def _nt_and_op
    start_index = index
    if node_cache[:and_op].has_key?(index)
      cached = node_cache[:and_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("and", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("and")
      r0 = nil
    end

    node_cache[:and_op][start_index] = r0

    r0
  end

  def _nt_or_op
    start_index = index
    if node_cache[:or_op].has_key?(index)
      cached = node_cache[:or_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("or", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("or")
      r0 = nil
    end

    node_cache[:or_op][start_index] = r0

    r0
  end

  def _nt_xor_op
    start_index = index
    if node_cache[:xor_op].has_key?(index)
      cached = node_cache[:xor_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("xor", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("xor")
      r0 = nil
    end

    node_cache[:xor_op][start_index] = r0

    r0
  end

  def _nt_nand_op
    start_index = index
    if node_cache[:nand_op].has_key?(index)
      cached = node_cache[:nand_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("nand", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure("nand")
      r0 = nil
    end

    node_cache[:nand_op][start_index] = r0

    r0
  end

  module Expression0
    def _1
      elements[1]
    end

    def condition
      elements[2]
    end

    def _2
      elements[3]
    end

  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?("(", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt__
      s1 << r3
      if r3
        r4 = _nt_condition
        s1 << r4
        if r4
          r5 = _nt__
          s1 << r5
          if r5
            if has_terminal?(")", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(")")
              r6 = nil
            end
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Expression0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Parenthesised)
    else
      r7 = _nt_negated_expression
      if r7
        r0 = r7
        r0.extend(Parenthesised)
      else
        r8 = _nt_in_expression
        if r8
          r0 = r8
          r0.extend(Parenthesised)
        else
          r9 = _nt_compare_expression
          if r9
            r0 = r9
            r0.extend(Parenthesised)
          else
            r10 = _nt_regexp_expression
            if r10
              r0 = r10
              r0.extend(Parenthesised)
            else
              r11 = _nt_rvalue
              if r11
                r0 = r11
                r0.extend(Parenthesised)
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  module NegatedExpression0
    def negate_op
      elements[0]
    end

    def _
      elements[1]
    end

    def expression
      elements[2]
    end
  end

  def _nt_negated_expression
    start_index = index
    if node_cache[:negated_expression].has_key?(index)
      cached = node_cache[:negated_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_negate_op
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        r3 = _nt_expression
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(Parenthesised,input, i0...index, s0)
      r0.extend(NegatedExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:negated_expression][start_index] = r0

    r0
  end

  def _nt_negate_op
    start_index = index
    if node_cache[:negate_op].has_key?(index)
      cached = node_cache[:negate_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("!", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("!")
      r0 = nil
    end

    node_cache[:negate_op][start_index] = r0

    r0
  end

  module InExpression0
    def _
      elements[1]
    end
  end

  module InExpression1
    def needle
      elements[0]
    end

    def _1
      elements[1]
    end

    def negated
      elements[2]
    end

    def _2
      elements[4]
    end

    def haystack
      elements[5]
    end
  end

  def _nt_in_expression
    start_index = index
    if node_cache[:in_expression].has_key?(index)
      cached = node_cache[:in_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_rvalue
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        i4, s4 = index, []
        if has_terminal?("not", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure("not")
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt__
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(InExpression0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          if has_terminal?("in", false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("in")
            r7 = nil
          end
          s0 << r7
          if r7
            r8 = _nt__
            s0 << r8
            if r8
              r9 = _nt_rvalue
              s0 << r9
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(InExpression,input, i0...index, s0)
      r0.extend(InExpression1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:in_expression][start_index] = r0

    r0
  end

  module MethodCall0
    def comma
      elements[0]
    end

    def _item
      elements[1]
    end
  end

  module MethodCall1
    def _item
      elements[0]
    end

    def _items
      elements[1]
    end
  end

  module MethodCall2
    def method
      elements[0]
    end

    def _1
      elements[1]
    end

    def _2
      elements[3]
    end

    def _items
      elements[4]
    end

    def _3
      elements[5]
    end

  end

  def _nt_method_call
    start_index = index
    if node_cache[:method_call].has_key?(index)
      cached = node_cache[:method_call][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_method
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        if has_terminal?("(", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("(")
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt__
          s0 << r4
          if r4
            i6, s6 = index, []
            r7 = _nt_rvalue
            s6 << r7
            if r7
              s8, i8 = [], index
              loop do
                i9, s9 = index, []
                r10 = _nt_comma
                s9 << r10
                if r10
                  r11 = _nt_rvalue
                  s9 << r11
                end
                if s9.last
                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                  r9.extend(MethodCall0)
                else
                  @index = i9
                  r9 = nil
                end
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s6 << r8
            end
            if s6.last
              r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
              r6.extend(MethodCall1)
            else
              @index = i6
              r6 = nil
            end
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              r12 = _nt__
              s0 << r12
              if r12
                if has_terminal?(")", false, index)
                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(")")
                  r13 = nil
                end
                s0 << r13
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(MethodCall,input, i0...index, s0)
      r0.extend(MethodCall2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:method_call][start_index] = r0

    r0
  end

  def _nt_method
    start_index = index
    if node_cache[:method].has_key?(index)
      cached = node_cache[:method][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_bareword

    node_cache[:method][start_index] = r0

    r0
  end

  module CompareExpression0
    def rvalue1
      elements[0]
    end

    def _1
      elements[1]
    end

    def _2
      elements[3]
    end

    def rvalue2
      elements[4]
    end
  end

  def _nt_compare_expression
    start_index = index
    if node_cache[:compare_expression].has_key?(index)
      cached = node_cache[:compare_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_rvalue
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        i3 = index
        r4 = _nt_eq_op
        if r4
          r3 = r4
        else
          r5 = _nt_ne_op
          if r5
            r3 = r5
          else
            r6 = _nt_le_op
            if r6
              r3 = r6
            else
              r7 = _nt_ge_op
              if r7
                r3 = r7
              else
                r8 = _nt_lt_op
                if r8
                  r3 = r8
                else
                  r9 = _nt_gt_op
                  if r9
                    r3 = r9
                  else
                    @index = i3
                    r3 = nil
                  end
                end
              end
            end
          end
        end
        s0 << r3
        if r3
          r10 = _nt__
          s0 << r10
          if r10
            r11 = _nt_rvalue
            s0 << r11
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CompareExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:compare_expression][start_index] = r0

    r0
  end

  def _nt_eq_op
    start_index = index
    if node_cache[:eq_op].has_key?(index)
      cached = node_cache[:eq_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("==", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("==")
      r0 = nil
    end

    node_cache[:eq_op][start_index] = r0

    r0
  end

  def _nt_ne_op
    start_index = index
    if node_cache[:ne_op].has_key?(index)
      cached = node_cache[:ne_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("!=", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("!=")
      r0 = nil
    end

    node_cache[:ne_op][start_index] = r0

    r0
  end

  def _nt_le_op
    start_index = index
    if node_cache[:le_op].has_key?(index)
      cached = node_cache[:le_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("<=", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("<=")
      r0 = nil
    end

    node_cache[:le_op][start_index] = r0

    r0
  end

  def _nt_ge_op
    start_index = index
    if node_cache[:ge_op].has_key?(index)
      cached = node_cache[:ge_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(">=", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure(">=")
      r0 = nil
    end

    node_cache[:ge_op][start_index] = r0

    r0
  end

  def _nt_lt_op
    start_index = index
    if node_cache[:lt_op].has_key?(index)
      cached = node_cache[:lt_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("<", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("<")
      r0 = nil
    end

    node_cache[:lt_op][start_index] = r0

    r0
  end

  def _nt_gt_op
    start_index = index
    if node_cache[:gt_op].has_key?(index)
      cached = node_cache[:gt_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(">", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(">")
      r0 = nil
    end

    node_cache[:gt_op][start_index] = r0

    r0
  end

  module RegexpExpression0
    def rvalue
      elements[0]
    end

    def _1
      elements[1]
    end

    def _2
      elements[3]
    end

  end

  def _nt_regexp_expression
    start_index = index
    if node_cache[:regexp_expression].has_key?(index)
      cached = node_cache[:regexp_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_rvalue
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        i3 = index
        r4 = _nt_re_match_op
        if r4
          r3 = r4
        else
          r5 = _nt_re_not_match_op
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
        if r3
          r6 = _nt__
          s0 << r6
          if r6
            i7 = index
            r8 = _nt_string
            r8.extend(Regexped)
            if r8
              r7 = r8
            else
              r9 = _nt_regexp
              if r9
                r7 = r9
              else
                @index = i7
                r7 = nil
              end
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Parenthesised,input, i0...index, s0)
      r0.extend(RegexpExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:regexp_expression][start_index] = r0

    r0
  end

  def _nt_re_match_op
    start_index = index
    if node_cache[:re_match_op].has_key?(index)
      cached = node_cache[:re_match_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("=~", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("=~")
      r0 = nil
    end

    node_cache[:re_match_op][start_index] = r0

    r0
  end

  def _nt_re_not_match_op
    start_index = index
    if node_cache[:re_not_match_op].has_key?(index)
      cached = node_cache[:re_not_match_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("!~", false, index)
      r0 = instantiate_node(Operator,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("!~")
      r0 = nil
    end

    node_cache[:re_not_match_op][start_index] = r0

    r0
  end

  def _nt_rvalue
    start_index = index
    if node_cache[:rvalue].has_key?(index)
      cached = node_cache[:rvalue][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_selector
    if r1
      r0 = r1
    else
      r2 = _nt_method_call
      if r2
        r0 = r2
      else
        r3 = _nt_value
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:rvalue][start_index] = r0

    r0
  end

  def _nt_selector
    start_index = index
    if node_cache[:selector].has_key?(index)
      cached = node_cache[:selector][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_selector_element
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Selector,input, i0...index, s0)
    end

    node_cache[:selector][start_index] = r0

    r0
  end

  module SelectorElement0
  end

  def _nt_selector_element
    start_index = index
    if node_cache[:selector_element].has_key?(index)
      cached = node_cache[:selector_element][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("[", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("[")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[^\\], ]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?("]", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("]")
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SelectorElement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:selector_element][start_index] = r0

    r0
  end

end

class LogStashConfigParser < Treetop::Runtime::CompiledParser
  include LogStashConfig
end

