# This Dockerfile was generated from templates/Dockerfile.erb
<%# image_flavor 'full', oss', 'wolfi', 'observability-sre' -%>
<% if local_artifacts == 'false' -%>
  <%   url_root = 'https://artifacts.elastic.co/downloads/logstash' -%>
<% else -%>
  <%   url_root = 'http://localhost:8000' -%>
<% end -%>
<% if image_flavor == 'oss' -%>
  <%   tarball = "logstash-oss-#{elastic_version}-linux-${arch}.tar.gz" -%>
  <%   license = 'Apache 2.0' -%>
<% elsif image_flavor == 'full' %>
  <%   tarball = "logstash-#{elastic_version}-linux-${arch}.tar.gz" -%>
  <%   license = 'Elastic License' -%>
<% elsif image_flavor == 'observability-sre' -%><%# 'observability-sre' needs arch to be injected from the outside -%>
  <%   tarball = "logstash-observability-sre-#{elastic_version}-linux-#{arch}.tar.gz" -%>
  <%   license = 'Elastic License' -%>
<% else -%><%# 'wolfi' needs arch to be injected from the outside -%>
  <%   tarball = "logstash-#{elastic_version}-linux-#{arch}.tar.gz" -%>
  <%   license = 'Elastic License' -%>
<% end -%>
<% if image_flavor == 'full' || image_flavor == 'oss' -%>
  <%   base_image = 'redhat/ubi9-minimal:latest' -%>
  <%   go_image = 'golang:1.23' -%>
  <%   package_manager = 'microdnf' -%>
<% elsif image_flavor == 'observability-sre' -%>
  <%   base_image = 'docker.elastic.co/wolfi/chainguard-base-fips' -%>
  <%   go_image = 'docker.elastic.co/wolfi/go:1.23' -%>
  <%   package_manager = 'apk' -%>
<% else -%>
  <%   base_image = 'docker.elastic.co/wolfi/chainguard-base' -%>
  <%   go_image = 'docker.elastic.co/wolfi/go:1.23' -%>
  <%   package_manager = 'apk' -%>
<% end -%>
<%   locale = 'C.UTF-8' -%>

# Build env2yaml
FROM <%= go_image %> AS builder-env2yaml

COPY env2yaml/env2yaml.go env2yaml/go.mod env2yaml/go.sum /tmp/go/src/env2yaml/

WORKDIR /tmp/go/src/env2yaml

RUN go build -trimpath

# Build main image
# Minimal distributions do not ship with en language packs.
FROM <%= base_image %>

ENV ELASTIC_CONTAINER=true
ENV PATH=/usr/share/logstash/bin:$PATH
ENV LANG=<%= locale %> LC_ALL=<%= locale %>

WORKDIR /usr/share

# Install packages
RUN \
<% if image_flavor == 'full' || image_flavor == 'oss' -%>
  <%= package_manager %> install -y procps findutils tar gzip && \
  <%= package_manager %> install -y openssl && \
  <%= package_manager %> install -y which shadow-utils && \
  <%= package_manager %> clean all
<% else -%><%# 'wolfi', 'observability-sre' -%>
  <%= package_manager %> add --no-cache java-cacerts curl bash openssl
<% end -%>

# Provide a non-root user to run the process
# Add Logstash itself and set permissions
<% if image_flavor == 'full' || image_flavor == 'oss' -%>
RUN groupadd --gid 1000 logstash && \
  adduser --uid 1000 --gid 1000 \
  --home "/usr/share/logstash" \
  --no-create-home \
  logstash && \
<% else -%><%# 'wolfi', 'observability-sre' -%>
RUN addgroup -g 1000 logstash && \
  adduser -u 1000 -G logstash \
  --disabled-password \
  --gecos "" \
  --home "/usr/share/logstash" \
  --shell "/sbin/nologin" \
  --no-create-home \
  logstash && \
<% end -%>
<% if image_flavor == 'full' || image_flavor == 'oss' -%>
  arch="$(rpm --query --queryformat='%{ARCH}' rpm)" && \
<% end -%>
  curl --fail --location --output logstash.tar.gz <%= url_root %>/<%= tarball %> && \
  tar -zxf logstash.tar.gz -C /usr/share && \
  rm logstash.tar.gz && \
  mv /usr/share/logstash-<%= elastic_version %> /usr/share/logstash && \
  chown -R logstash:root /usr/share/logstash && \
  chmod -R g=u /usr/share/logstash && \
  mkdir /licenses && \
  mv /usr/share/logstash/NOTICE.TXT /licenses/NOTICE.TXT && \
  mv /usr/share/logstash/LICENSE.txt /licenses/LICENSE.txt && \
  find /usr/share/logstash -type d -exec chmod g+s {} \; && \
  ln -s /usr/share/logstash /opt/logstash

COPY --from=builder-env2yaml /tmp/go/src/env2yaml/env2yaml /usr/local/bin/env2yaml
COPY --chown=logstash:root config/pipelines.yml config/log4j2.properties config/log4j2.file.properties /usr/share/logstash/config/
<% if image_flavor == 'oss' -%>
COPY --chown=logstash:root config/logstash-oss.yml /usr/share/logstash/config/logstash.yml
<% else -%><%# 'full', 'wolfi', 'observability-sre' -%>
COPY --chown=logstash:root config/logstash-full.yml /usr/share/logstash/config/logstash.yml
<% end -%>
COPY --chown=logstash:root pipeline/default.conf /usr/share/logstash/pipeline/logstash.conf
COPY --chmod=0755 bin/docker-entrypoint /usr/local/bin/

<% if image_flavor == 'observability-sre' -%>
<%# Add FIPS configuration for observability-sre image flavor %>

RUN mkdir -p /usr/share/logstash/config/security

# Copy JVM security configuration files from the unpacked tarball
RUN cp /usr/share/logstash/x-pack/distributions/internal/observabilitySRE/config/security/java.security /usr/share/logstash/config/security/ && \
    chown --recursive logstash:root /usr/share/logstash/config/security/

# list the classes provided by the fips BC
RUN find /usr/share/logstash -name *.jar | grep lib

# Update certs installed from java-cacerts package
RUN ln -sf /etc/ssl/certs/java/cacerts /usr/share/logstash/jdk/lib/security/cacerts

# Convert JKS to BCFKS for truststore
RUN /usr/share/logstash/jdk/bin/keytool -importkeystore \
    -srckeystore /usr/share/logstash/jdk/lib/security/cacerts \
    -destkeystore /usr/share/logstash/config/security/cacerts.bcfks \
    -srcstoretype jks \
    -deststoretype bcfks \
    -providerpath /usr/share/logstash/logstash-core/lib/jars/bc-fips-2.0.0.jar \
    -provider org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \
    -deststorepass changeit \
    -srcstorepass changeit \
    -noprompt

# Set Java security properties through LS_JAVA_OPTS
ENV LS_JAVA_OPTS="\
    -Djava.security.properties=/usr/share/logstash/config/security/java.security \
    -Djavax.net.ssl.trustStore=/usr/share/logstash/config/security/cacerts.bcfks \
    -Djavax.net.ssl.trustStoreType=BCFKS \
    -Djavax.net.ssl.trustStoreProvider=BCFIPS \
    -Djavax.net.ssl.trustStorePassword=changeit \
    -Dssl.KeyManagerFactory.algorithm=PKIX \
    -Dssl.TrustManagerFactory.algorithm=PKIX \
    -Dorg.bouncycastle.fips.approved_only=true"
<% end -%>

WORKDIR /usr/share/logstash

USER 1000

EXPOSE 9600 5044

LABEL org.label-schema.build-date=<%= created_date %> \
  org.label-schema.license="<%= license %>" \
  org.label-schema.name="logstash" \
  org.label-schema.schema-version="1.0" \
  org.label-schema.url="https://www.elastic.co/products/logstash" \
  org.label-schema.vcs-url="https://github.com/elastic/logstash" \
  org.label-schema.vendor="Elastic" \
  org.label-schema.version="<%= elastic_version %>" \
  org.opencontainers.image.created=<%= created_date %> \
  org.opencontainers.image.description="Logstash is a free and open server-side data processing pipeline that ingests data from a multitude of sources, transforms it, and then sends it to your favorite 'stash.'" \
  org.opencontainers.image.licenses="<%= license %>" \
  org.opencontainers.image.title="logstash" \
  org.opencontainers.image.vendor="Elastic" \
  org.opencontainers.image.version="<%= elastic_version %>" \
  description="Logstash is a free and open server-side data processing pipeline that ingests data from a multitude of sources, transforms it, and then sends it to your favorite 'stash.'" \
  license="<%= license %>" \
  maintainer="info@elastic.co" \
  name="logstash" \
  summary="Logstash is a free and open server-side data processing pipeline that ingests data from a multitude of sources, transforms it, and then sends it to your favorite 'stash.'" \
  vendor="Elastic"

ENTRYPOINT ["/usr/local/bin/docker-entrypoint"]
